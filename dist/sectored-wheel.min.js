(()=>{const t=function*(t){let e=0;for(;;)e>=t.length&&(e=0),yield t[e],e++};class e extends HTMLElement{shadow=null;onConnect(){}onDisconnect(){}constructor(){super()}emit(t,e){const n=new CustomEvent(t,{detail:{element:this,data:e}}),r=this[`on${t}`];if("function"==typeof r)r.call(this,n);else{const e=this.getAttribute(`on${t}`);e?new Function("e",`var event = e; return ${e}`):this.dispatchEvent(n)}}connectedCallback(){this.shadow=this.attachShadow({mode:"open"}),this.onConnect()}disconnectedCallback(){this.onDisconnect()}}class n extends e{#t;onConnect(){super.onConnect();const t=document.createElement("template");t.innerHTML='<style>\n            :host {\n                display: flex;\n                flex-direction: row;\n                justify-content: flex-end;\n                align-items: center;\n                padding-right: calc(var(--radius) * 0.15);\n                box-sizing: border-box;\n                position: absolute;\n                color: #000;\n                left: 50%;\n                width: var(--radius);\n                height: var(--sector-height);\n                font-size: min(calc(var(--sector-height) * 0.2), calc(var(--radius) / 8));\n                font-weight: bold;\n                font-family: sans-serif;\n                text-transform: uppercase;\n                transform-origin: 0 50%;\n                z-index: 1;\n            }\n            :host::before {\n                --width: calc(var(--radius) / 15);\n                --border: calc(var(--width) / 4);\n                content: "";\n                width: var(--width);\n                aspect-ratio: 1/1;\n                position: absolute;\n                right: 0;\n                transform-origin: calc((var(--radius) - var(--width)) * -1) 50%;\n                transform: rotate(calc(var(--sector-angle) / 2)) translateX(calc(var(--border) * -1));\n                border-radius: 50%;\n                box-shadow:\n                    inset rgba(0,0,0,0.1) 0 0 0 var(--border),\n                    inset var(--rim-color) 0 0 0 var(--width),\n                    rgba(0,0,0,0.1) calc(var(--border) * -1) 0 0 0;\n            }\n        </style><slot class="sector"></slot>',this.shadow.appendChild(t.content),this.#t=this.shadow.querySelector("slot.sector")}}window.customElements.get("sectored-wheel-item")||(window.SectorElement=n,window.customElements.define("sectored-wheel-item",n));class r extends e{#e;#t;#n=0;#r=0;#s=0;#o=!0;#i=[];#a=t([]);#c;#l;realign=()=>{const t=[],e=this.querySelectorAll("sectored-wheel-item");this.#s=e.length,this.style.setProperty("--sectors-count",this.#s);for(let e=0;e<this.#s;e++)t.push(`var(${this.#a.next().value}) calc(var(--sector-angle) * ${e}) calc(var(--sector-angle) * ${e+1})`);this.#t.style.background=`conic-gradient(from calc(90deg - var(--sector-angle) / 2), ${t.join(", ")})`,e.forEach(((t,e)=>{t.style.transform=`rotate(calc(var(--sector-angle) * ${e}))`}))};static get observedAttributes(){return["colors","rim-color","size","index"]}attributeChangedCallback(t,e,n){if(e!==n)switch(t){case"colors":this.colors=n;break;case"rim-color":this.rimColor=n;break;case"size":this.size=n}"index"===t&&(this.index=n)}rotate(t,e){if(this.#s){const n=360/this.#s;this.#n-=360+n*(t<e?Math.abs(e-t):Math.abs(this.#s-t+e)),this.#t.style.transform=`rotate(${this.#n-90}deg)`}}set index(t){const e=parseInt(t||0,10);this.#s&&(this.#o=!1,this.rotate(this.#r,e)),this.#r=e}get index(){return this.#r}set size(t){this.#l=t||"100px",this.style.setProperty("--radius",`calc(${t} / 2)`)}get size(){return this.#l}set rimColor(t){this.#c=t||"silver",this.style.setProperty("--rim-color",t)}get rimColor(){return this.#c}set colors(e){this.#i.length&&this.#i.forEach(((t,e)=>{this.style.removeProperty(`--color${e}`)})),Array.isArray(e)?this.#i=e:this.#i=String(e).split(/\s*[;|]+\s*/).filter(Boolean);const n=this.#i.map(((t,e)=>{const n=`--color${e}`;return this.style.setProperty(n,t),n}));this.#a=t(n)}get colors(){return this.#i}onConnect(){super.onConnect();const t=document.createElement("template");t.innerHTML='<style>\n            :host {\n                position: relative;\n                display: inline-flex;\n                justify-content: center;\n                align-items: center;\n                flex-grow: 0;\n                flex-shrink: 0;\n                user-select: none;\n                min-width: 100px;\n                border-radius: 50%;\n                background: rgba(255, 255, 255, 0.2);\n                width: calc(var(--radius) * 2);\n                --radius: 50px;\n                --sector-height: calc((6.28 * var(--radius)) / var(--sectors-count));\n                --sector-angle: calc(360deg / var(--sectors-count));\n                box-shadow:\n                    rgba(0,0,0,0.1) 0 0 0 calc(var(--radius) / 25);;\n            }\n            :host::after {\n                --width: calc(var(--radius) / 6);\n                --border: calc(var(--width) / 10);\n                content: "";\n                position: absolute;\n                aspect-ratio: 1/1;\n                border-radius: 50%;\n                background-color: white;\n                width: var(--width);\n                box-shadow:\n                    inset rgba(0,0,0,0.1) 0 0 0 var(--border), \n                    inset var(--rim-color) 0 0 0 calc(var(--border) * 2.5),\n                    rgba(0,0,0,0.1) 0 0 0 calc(var(--border) * 2);\n            }\n            :host::before {\n                --width: calc(var(--radius) / 6);\n                --border: calc(var(--width) / 10);\n                content: "";\n                position: absolute;\n                top: 0;\n                aspect-ratio: 1/1;\n                border-radius: 50% 50% 50% 20%;\n                transform: translateY(-60%) rotate(-45deg);\n                background-color: white;\n                width: var(--width);\n                z-index: 1;\n                box-shadow:\n                    inset rgba(0,0,0,0.1) 0 0 0 var(--border), \n                    inset var(--rim-color) 0 0 0 calc(var(--border) * 3),\n                    rgba(0,0,0,0.1) 0 0 0 calc(var(--border) * 2);\n            }\n            :host > slot.wheel {\n                position: relative;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                width: 100%;\n                aspect-ratio: 1/1;\n                border-radius: 50%;\n                overflow: hidden;\n                transform: rotate(-90deg);\n                transition: transform 5s cubic-bezier(0.25, 1, 0.5, 1);\n                box-shadow:\n                    inset rgba(0,0,0,0.3) 0 0 0 calc(var(--radius) * 0.01),\n                    inset var(--rim-color) 0 0 0 calc(var(--radius) * 0.05),\n                    inset rgba(0,0,0,0.1) 0 0 0 calc(var(--radius) * 0.07);\n            }\n        </style><slot class="wheel"></slot>',this.shadow.appendChild(t.content),this.#t=this.shadow.querySelector("slot.wheel"),this.#e=new MutationObserver(this.realign),this.#e.observe(this,{childList:!0}),this.#t.addEventListener("transitionend",(()=>{this.#o||this.emit("change",this.#r),this.#o=!1})),this.realign(),requestAnimationFrame((()=>{this.rotate(0,this.index)}))}onDisconnect(){this.#e.disconnect(),super.onDisconnect()}}window.customElements.get("sectored-wheel")||(window.SectoredWheelElement=r,window.customElements.define("sectored-wheel",r))})();